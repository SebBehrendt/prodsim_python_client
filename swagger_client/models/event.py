# coding: utf-8

"""
    ProdSim API

     The ProdSim-API allows you to create and run production simulations and optimizations with the ProdSim library.    # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: sebastianbehrendt97@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'float',
        'resource': 'str',
        'state': 'str',
        'state_type': 'str',
        'activity': 'str',
        'material': 'str',
        'expected_end_time': 'float',
        'target_location': 'str'
    }

    attribute_map = {
        'time': 'time',
        'resource': 'resource',
        'state': 'state',
        'state_type': 'state_type',
        'activity': 'activity',
        'material': 'material',
        'expected_end_time': 'expected_end_time',
        'target_location': 'target_location'
    }

    def __init__(self, time=None, resource=None, state=None, state_type=None, activity=None, material=None, expected_end_time=None, target_location=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._time = None
        self._resource = None
        self._state = None
        self._state_type = None
        self._activity = None
        self._material = None
        self._expected_end_time = None
        self._target_location = None
        self.discriminator = None
        self.time = time
        self.resource = resource
        self.state = state
        self.state_type = state_type
        self.activity = activity
        if material is not None:
            self.material = material
        if expected_end_time is not None:
            self.expected_end_time = expected_end_time
        if target_location is not None:
            self.target_location = target_location

    @property
    def time(self):
        """Gets the time of this Event.  # noqa: E501


        :return: The time of this Event.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Event.


        :param time: The time of this Event.  # noqa: E501
        :type: float
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def resource(self):
        """Gets the resource of this Event.  # noqa: E501


        :return: The resource of this Event.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Event.


        :param resource: The resource of this Event.  # noqa: E501
        :type: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def state(self):
        """Gets the state of this Event.  # noqa: E501


        :return: The state of this Event.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Event.


        :param state: The state of this Event.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def state_type(self):
        """Gets the state_type of this Event.  # noqa: E501


        :return: The state_type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._state_type

    @state_type.setter
    def state_type(self, state_type):
        """Sets the state_type of this Event.


        :param state_type: The state_type of this Event.  # noqa: E501
        :type: str
        """
        if state_type is None:
            raise ValueError("Invalid value for `state_type`, must not be `None`")  # noqa: E501

        self._state_type = state_type

    @property
    def activity(self):
        """Gets the activity of this Event.  # noqa: E501


        :return: The activity of this Event.  # noqa: E501
        :rtype: str
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this Event.


        :param activity: The activity of this Event.  # noqa: E501
        :type: str
        """
        if activity is None:
            raise ValueError("Invalid value for `activity`, must not be `None`")  # noqa: E501

        self._activity = activity

    @property
    def material(self):
        """Gets the material of this Event.  # noqa: E501


        :return: The material of this Event.  # noqa: E501
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this Event.


        :param material: The material of this Event.  # noqa: E501
        :type: str
        """

        self._material = material

    @property
    def expected_end_time(self):
        """Gets the expected_end_time of this Event.  # noqa: E501


        :return: The expected_end_time of this Event.  # noqa: E501
        :rtype: float
        """
        return self._expected_end_time

    @expected_end_time.setter
    def expected_end_time(self, expected_end_time):
        """Sets the expected_end_time of this Event.


        :param expected_end_time: The expected_end_time of this Event.  # noqa: E501
        :type: float
        """

        self._expected_end_time = expected_end_time

    @property
    def target_location(self):
        """Gets the target_location of this Event.  # noqa: E501


        :return: The target_location of this Event.  # noqa: E501
        :rtype: str
        """
        return self._target_location

    @target_location.setter
    def target_location(self, target_location):
        """Sets the target_location of this Event.


        :param target_location: The target_location of this Event.  # noqa: E501
        :type: str
        """

        self._target_location = target_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
