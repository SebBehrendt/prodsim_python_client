# coding: utf-8

"""
    ProdSim API

     The ProdSim-API allows you to create and run production simulations and optimizations with the ProdSim library.    # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: sebastianbehrendt97@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductionResourceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'capacity': 'int',
        'location': 'list[float]',
        'controller': 'str',
        'control_policy': 'str',
        'processes': 'list[str]',
        'process_capacity': 'list[int]',
        'states': 'list[str]',
        'input_queues': 'list[str]',
        'output_queues': 'list[str]'
    }

    attribute_map = {
        'id': 'ID',
        'description': 'description',
        'capacity': 'capacity',
        'location': 'location',
        'controller': 'controller',
        'control_policy': 'control_policy',
        'processes': 'processes',
        'process_capacity': 'process_capacity',
        'states': 'states',
        'input_queues': 'input_queues',
        'output_queues': 'output_queues'
    }

    def __init__(self, id=None, description=None, capacity=None, location=None, controller=None, control_policy=None, processes=None, process_capacity=None, states=None, input_queues=None, output_queues=None):  # noqa: E501
        """ProductionResourceData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._capacity = None
        self._location = None
        self._controller = None
        self._control_policy = None
        self._processes = None
        self._process_capacity = None
        self._states = None
        self._input_queues = None
        self._output_queues = None
        self.discriminator = None
        self.id = id
        self.description = description
        self.capacity = capacity
        self.location = location
        self.controller = controller
        self.control_policy = control_policy
        self.processes = processes
        if process_capacity is not None:
            self.process_capacity = process_capacity
        if states is not None:
            self.states = states
        if input_queues is not None:
            self.input_queues = input_queues
        if output_queues is not None:
            self.output_queues = output_queues

    @property
    def id(self):
        """Gets the id of this ProductionResourceData.  # noqa: E501


        :return: The id of this ProductionResourceData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductionResourceData.


        :param id: The id of this ProductionResourceData.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this ProductionResourceData.  # noqa: E501


        :return: The description of this ProductionResourceData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductionResourceData.


        :param description: The description of this ProductionResourceData.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def capacity(self):
        """Gets the capacity of this ProductionResourceData.  # noqa: E501


        :return: The capacity of this ProductionResourceData.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ProductionResourceData.


        :param capacity: The capacity of this ProductionResourceData.  # noqa: E501
        :type: int
        """
        if capacity is None:
            raise ValueError("Invalid value for `capacity`, must not be `None`")  # noqa: E501

        self._capacity = capacity

    @property
    def location(self):
        """Gets the location of this ProductionResourceData.  # noqa: E501


        :return: The location of this ProductionResourceData.  # noqa: E501
        :rtype: list[float]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ProductionResourceData.


        :param location: The location of this ProductionResourceData.  # noqa: E501
        :type: list[float]
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def controller(self):
        """Gets the controller of this ProductionResourceData.  # noqa: E501


        :return: The controller of this ProductionResourceData.  # noqa: E501
        :rtype: str
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this ProductionResourceData.


        :param controller: The controller of this ProductionResourceData.  # noqa: E501
        :type: str
        """
        if controller is None:
            raise ValueError("Invalid value for `controller`, must not be `None`")  # noqa: E501
        allowed_values = ["SimpleController"]  # noqa: E501
        if controller not in allowed_values:
            raise ValueError(
                "Invalid value for `controller` ({0}), must be one of {1}"  # noqa: E501
                .format(controller, allowed_values)
            )

        self._controller = controller

    @property
    def control_policy(self):
        """Gets the control_policy of this ProductionResourceData.  # noqa: E501


        :return: The control_policy of this ProductionResourceData.  # noqa: E501
        :rtype: str
        """
        return self._control_policy

    @control_policy.setter
    def control_policy(self, control_policy):
        """Sets the control_policy of this ProductionResourceData.


        :param control_policy: The control_policy of this ProductionResourceData.  # noqa: E501
        :type: str
        """
        if control_policy is None:
            raise ValueError("Invalid value for `control_policy`, must not be `None`")  # noqa: E501
        allowed_values = ["FIFO", "LIFO", "SPT"]  # noqa: E501
        if control_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `control_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(control_policy, allowed_values)
            )

        self._control_policy = control_policy

    @property
    def processes(self):
        """Gets the processes of this ProductionResourceData.  # noqa: E501


        :return: The processes of this ProductionResourceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._processes

    @processes.setter
    def processes(self, processes):
        """Sets the processes of this ProductionResourceData.


        :param processes: The processes of this ProductionResourceData.  # noqa: E501
        :type: list[str]
        """
        if processes is None:
            raise ValueError("Invalid value for `processes`, must not be `None`")  # noqa: E501

        self._processes = processes

    @property
    def process_capacity(self):
        """Gets the process_capacity of this ProductionResourceData.  # noqa: E501


        :return: The process_capacity of this ProductionResourceData.  # noqa: E501
        :rtype: list[int]
        """
        return self._process_capacity

    @process_capacity.setter
    def process_capacity(self, process_capacity):
        """Sets the process_capacity of this ProductionResourceData.


        :param process_capacity: The process_capacity of this ProductionResourceData.  # noqa: E501
        :type: list[int]
        """

        self._process_capacity = process_capacity

    @property
    def states(self):
        """Gets the states of this ProductionResourceData.  # noqa: E501


        :return: The states of this ProductionResourceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this ProductionResourceData.


        :param states: The states of this ProductionResourceData.  # noqa: E501
        :type: list[str]
        """

        self._states = states

    @property
    def input_queues(self):
        """Gets the input_queues of this ProductionResourceData.  # noqa: E501


        :return: The input_queues of this ProductionResourceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._input_queues

    @input_queues.setter
    def input_queues(self, input_queues):
        """Sets the input_queues of this ProductionResourceData.


        :param input_queues: The input_queues of this ProductionResourceData.  # noqa: E501
        :type: list[str]
        """

        self._input_queues = input_queues

    @property
    def output_queues(self):
        """Gets the output_queues of this ProductionResourceData.  # noqa: E501


        :return: The output_queues of this ProductionResourceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._output_queues

    @output_queues.setter
    def output_queues(self, output_queues):
        """Sets the output_queues of this ProductionResourceData.


        :param output_queues: The output_queues of this ProductionResourceData.  # noqa: E501
        :type: list[str]
        """

        self._output_queues = output_queues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductionResourceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionResourceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
