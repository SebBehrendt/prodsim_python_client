# coding: utf-8

"""
    ProdSim API

     The ProdSim-API allows you to create and run production simulations and optimizations with the ProdSim library.    # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: sebastianbehrendt97@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TabuSearchHyperparameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seed': 'int',
        'tabu_size': 'int',
        'max_steps': 'int',
        'max_score': 'float'
    }

    attribute_map = {
        'seed': 'seed',
        'tabu_size': 'tabu_size',
        'max_steps': 'max_steps',
        'max_score': 'max_score'
    }

    def __init__(self, seed=0, tabu_size=10, max_steps=300, max_score=500):  # noqa: E501
        """TabuSearchHyperparameters - a model defined in Swagger"""  # noqa: E501
        self._seed = None
        self._tabu_size = None
        self._max_steps = None
        self._max_score = None
        self.discriminator = None
        if seed is not None:
            self.seed = seed
        if tabu_size is not None:
            self.tabu_size = tabu_size
        if max_steps is not None:
            self.max_steps = max_steps
        if max_score is not None:
            self.max_score = max_score

    @property
    def seed(self):
        """Gets the seed of this TabuSearchHyperparameters.  # noqa: E501

        Seed for random number generator  # noqa: E501

        :return: The seed of this TabuSearchHyperparameters.  # noqa: E501
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this TabuSearchHyperparameters.

        Seed for random number generator  # noqa: E501

        :param seed: The seed of this TabuSearchHyperparameters.  # noqa: E501
        :type: int
        """

        self._seed = seed

    @property
    def tabu_size(self):
        """Gets the tabu_size of this TabuSearchHyperparameters.  # noqa: E501

        Size of tabu list  # noqa: E501

        :return: The tabu_size of this TabuSearchHyperparameters.  # noqa: E501
        :rtype: int
        """
        return self._tabu_size

    @tabu_size.setter
    def tabu_size(self, tabu_size):
        """Sets the tabu_size of this TabuSearchHyperparameters.

        Size of tabu list  # noqa: E501

        :param tabu_size: The tabu_size of this TabuSearchHyperparameters.  # noqa: E501
        :type: int
        """

        self._tabu_size = tabu_size

    @property
    def max_steps(self):
        """Gets the max_steps of this TabuSearchHyperparameters.  # noqa: E501

        Maximum number of steps  # noqa: E501

        :return: The max_steps of this TabuSearchHyperparameters.  # noqa: E501
        :rtype: int
        """
        return self._max_steps

    @max_steps.setter
    def max_steps(self, max_steps):
        """Sets the max_steps of this TabuSearchHyperparameters.

        Maximum number of steps  # noqa: E501

        :param max_steps: The max_steps of this TabuSearchHyperparameters.  # noqa: E501
        :type: int
        """

        self._max_steps = max_steps

    @property
    def max_score(self):
        """Gets the max_score of this TabuSearchHyperparameters.  # noqa: E501

        Maximum score  # noqa: E501

        :return: The max_score of this TabuSearchHyperparameters.  # noqa: E501
        :rtype: float
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this TabuSearchHyperparameters.

        Maximum score  # noqa: E501

        :param max_score: The max_score of this TabuSearchHyperparameters.  # noqa: E501
        :type: float
        """

        self._max_score = max_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TabuSearchHyperparameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TabuSearchHyperparameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
