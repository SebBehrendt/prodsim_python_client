# coding: utf-8

"""
    ProdSim API

     The ProdSim-API allows you to create and run production simulations and optimizations with the ProdSim library.    # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: sebastianbehrendt97@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScenarioOptionsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transformations': 'list[ReconfigurationEnum]',
        'machine_controllers': 'list[str]',
        'transport_controllers': 'list[str]',
        'routing_heuristics': 'list[str]',
        'positions': 'list[list[float]]'
    }

    attribute_map = {
        'transformations': 'transformations',
        'machine_controllers': 'machine_controllers',
        'transport_controllers': 'transport_controllers',
        'routing_heuristics': 'routing_heuristics',
        'positions': 'positions'
    }

    def __init__(self, transformations=None, machine_controllers=None, transport_controllers=None, routing_heuristics=None, positions=None):  # noqa: E501
        """ScenarioOptionsData - a model defined in Swagger"""  # noqa: E501
        self._transformations = None
        self._machine_controllers = None
        self._transport_controllers = None
        self._routing_heuristics = None
        self._positions = None
        self.discriminator = None
        self.transformations = transformations
        self.machine_controllers = machine_controllers
        self.transport_controllers = transport_controllers
        self.routing_heuristics = routing_heuristics
        self.positions = positions

    @property
    def transformations(self):
        """Gets the transformations of this ScenarioOptionsData.  # noqa: E501


        :return: The transformations of this ScenarioOptionsData.  # noqa: E501
        :rtype: list[ReconfigurationEnum]
        """
        return self._transformations

    @transformations.setter
    def transformations(self, transformations):
        """Sets the transformations of this ScenarioOptionsData.


        :param transformations: The transformations of this ScenarioOptionsData.  # noqa: E501
        :type: list[ReconfigurationEnum]
        """
        if transformations is None:
            raise ValueError("Invalid value for `transformations`, must not be `None`")  # noqa: E501

        self._transformations = transformations

    @property
    def machine_controllers(self):
        """Gets the machine_controllers of this ScenarioOptionsData.  # noqa: E501


        :return: The machine_controllers of this ScenarioOptionsData.  # noqa: E501
        :rtype: list[str]
        """
        return self._machine_controllers

    @machine_controllers.setter
    def machine_controllers(self, machine_controllers):
        """Sets the machine_controllers of this ScenarioOptionsData.


        :param machine_controllers: The machine_controllers of this ScenarioOptionsData.  # noqa: E501
        :type: list[str]
        """
        if machine_controllers is None:
            raise ValueError("Invalid value for `machine_controllers`, must not be `None`")  # noqa: E501
        allowed_values = ["FIFO", "LIFO", "SPT"]  # noqa: E501
        if not set(machine_controllers).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `machine_controllers` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(machine_controllers) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._machine_controllers = machine_controllers

    @property
    def transport_controllers(self):
        """Gets the transport_controllers of this ScenarioOptionsData.  # noqa: E501


        :return: The transport_controllers of this ScenarioOptionsData.  # noqa: E501
        :rtype: list[str]
        """
        return self._transport_controllers

    @transport_controllers.setter
    def transport_controllers(self, transport_controllers):
        """Sets the transport_controllers of this ScenarioOptionsData.


        :param transport_controllers: The transport_controllers of this ScenarioOptionsData.  # noqa: E501
        :type: list[str]
        """
        if transport_controllers is None:
            raise ValueError("Invalid value for `transport_controllers`, must not be `None`")  # noqa: E501
        allowed_values = ["FIFO", "SPT_transport"]  # noqa: E501
        if not set(transport_controllers).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `transport_controllers` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(transport_controllers) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._transport_controllers = transport_controllers

    @property
    def routing_heuristics(self):
        """Gets the routing_heuristics of this ScenarioOptionsData.  # noqa: E501


        :return: The routing_heuristics of this ScenarioOptionsData.  # noqa: E501
        :rtype: list[str]
        """
        return self._routing_heuristics

    @routing_heuristics.setter
    def routing_heuristics(self, routing_heuristics):
        """Sets the routing_heuristics of this ScenarioOptionsData.


        :param routing_heuristics: The routing_heuristics of this ScenarioOptionsData.  # noqa: E501
        :type: list[str]
        """
        if routing_heuristics is None:
            raise ValueError("Invalid value for `routing_heuristics`, must not be `None`")  # noqa: E501
        allowed_values = ["shortest_queue", "random", "FIFO"]  # noqa: E501
        if not set(routing_heuristics).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `routing_heuristics` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(routing_heuristics) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._routing_heuristics = routing_heuristics

    @property
    def positions(self):
        """Gets the positions of this ScenarioOptionsData.  # noqa: E501


        :return: The positions of this ScenarioOptionsData.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this ScenarioOptionsData.


        :param positions: The positions of this ScenarioOptionsData.  # noqa: E501
        :type: list[list[float]]
        """
        if positions is None:
            raise ValueError("Invalid value for `positions`, must not be `None`")  # noqa: E501

        self._positions = positions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScenarioOptionsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioOptionsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
