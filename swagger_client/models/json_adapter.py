# coding: utf-8

"""
    ProdSim API

     The ProdSim-API allows you to create and run production simulations and optimizations with the ProdSim library.    # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: sebastianbehrendt97@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JsonAdapter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'valid_configuration': 'bool',
        'reconfiguration_cost': 'float',
        'seed': 'int',
        'time_model_data': 'list[AnyOfJsonAdapterTimeModelDataItems]',
        'state_data': 'list[AnyOfJsonAdapterStateDataItems]',
        'process_data': 'list[AnyOfJsonAdapterProcessDataItems]',
        'queue_data': 'list[QueueData]',
        'resource_data': 'list[AnyOfJsonAdapterResourceDataItems]',
        'material_data': 'list[MaterialData]',
        'sink_data': 'list[SinkData]',
        'source_data': 'list[SourceData]',
        'scenario_data': 'ScenarioData'
    }

    attribute_map = {
        'id': 'ID',
        'valid_configuration': 'valid_configuration',
        'reconfiguration_cost': 'reconfiguration_cost',
        'seed': 'seed',
        'time_model_data': 'time_model_data',
        'state_data': 'state_data',
        'process_data': 'process_data',
        'queue_data': 'queue_data',
        'resource_data': 'resource_data',
        'material_data': 'material_data',
        'sink_data': 'sink_data',
        'source_data': 'source_data',
        'scenario_data': 'scenario_data'
    }

    def __init__(self, id='', valid_configuration=True, reconfiguration_cost=0, seed=21, time_model_data=None, state_data=None, process_data=None, queue_data=None, resource_data=None, material_data=None, sink_data=None, source_data=None, scenario_data=None):  # noqa: E501
        """JsonAdapter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._valid_configuration = None
        self._reconfiguration_cost = None
        self._seed = None
        self._time_model_data = None
        self._state_data = None
        self._process_data = None
        self._queue_data = None
        self._resource_data = None
        self._material_data = None
        self._sink_data = None
        self._source_data = None
        self._scenario_data = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if valid_configuration is not None:
            self.valid_configuration = valid_configuration
        if reconfiguration_cost is not None:
            self.reconfiguration_cost = reconfiguration_cost
        if seed is not None:
            self.seed = seed
        if time_model_data is not None:
            self.time_model_data = time_model_data
        if state_data is not None:
            self.state_data = state_data
        if process_data is not None:
            self.process_data = process_data
        if queue_data is not None:
            self.queue_data = queue_data
        if resource_data is not None:
            self.resource_data = resource_data
        if material_data is not None:
            self.material_data = material_data
        if sink_data is not None:
            self.sink_data = sink_data
        if source_data is not None:
            self.source_data = source_data
        if scenario_data is not None:
            self.scenario_data = scenario_data

    @property
    def id(self):
        """Gets the id of this JsonAdapter.  # noqa: E501


        :return: The id of this JsonAdapter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JsonAdapter.


        :param id: The id of this JsonAdapter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def valid_configuration(self):
        """Gets the valid_configuration of this JsonAdapter.  # noqa: E501


        :return: The valid_configuration of this JsonAdapter.  # noqa: E501
        :rtype: bool
        """
        return self._valid_configuration

    @valid_configuration.setter
    def valid_configuration(self, valid_configuration):
        """Sets the valid_configuration of this JsonAdapter.


        :param valid_configuration: The valid_configuration of this JsonAdapter.  # noqa: E501
        :type: bool
        """

        self._valid_configuration = valid_configuration

    @property
    def reconfiguration_cost(self):
        """Gets the reconfiguration_cost of this JsonAdapter.  # noqa: E501


        :return: The reconfiguration_cost of this JsonAdapter.  # noqa: E501
        :rtype: float
        """
        return self._reconfiguration_cost

    @reconfiguration_cost.setter
    def reconfiguration_cost(self, reconfiguration_cost):
        """Sets the reconfiguration_cost of this JsonAdapter.


        :param reconfiguration_cost: The reconfiguration_cost of this JsonAdapter.  # noqa: E501
        :type: float
        """

        self._reconfiguration_cost = reconfiguration_cost

    @property
    def seed(self):
        """Gets the seed of this JsonAdapter.  # noqa: E501


        :return: The seed of this JsonAdapter.  # noqa: E501
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this JsonAdapter.


        :param seed: The seed of this JsonAdapter.  # noqa: E501
        :type: int
        """

        self._seed = seed

    @property
    def time_model_data(self):
        """Gets the time_model_data of this JsonAdapter.  # noqa: E501


        :return: The time_model_data of this JsonAdapter.  # noqa: E501
        :rtype: list[AnyOfJsonAdapterTimeModelDataItems]
        """
        return self._time_model_data

    @time_model_data.setter
    def time_model_data(self, time_model_data):
        """Sets the time_model_data of this JsonAdapter.


        :param time_model_data: The time_model_data of this JsonAdapter.  # noqa: E501
        :type: list[AnyOfJsonAdapterTimeModelDataItems]
        """

        self._time_model_data = time_model_data

    @property
    def state_data(self):
        """Gets the state_data of this JsonAdapter.  # noqa: E501


        :return: The state_data of this JsonAdapter.  # noqa: E501
        :rtype: list[AnyOfJsonAdapterStateDataItems]
        """
        return self._state_data

    @state_data.setter
    def state_data(self, state_data):
        """Sets the state_data of this JsonAdapter.


        :param state_data: The state_data of this JsonAdapter.  # noqa: E501
        :type: list[AnyOfJsonAdapterStateDataItems]
        """

        self._state_data = state_data

    @property
    def process_data(self):
        """Gets the process_data of this JsonAdapter.  # noqa: E501


        :return: The process_data of this JsonAdapter.  # noqa: E501
        :rtype: list[AnyOfJsonAdapterProcessDataItems]
        """
        return self._process_data

    @process_data.setter
    def process_data(self, process_data):
        """Sets the process_data of this JsonAdapter.


        :param process_data: The process_data of this JsonAdapter.  # noqa: E501
        :type: list[AnyOfJsonAdapterProcessDataItems]
        """

        self._process_data = process_data

    @property
    def queue_data(self):
        """Gets the queue_data of this JsonAdapter.  # noqa: E501


        :return: The queue_data of this JsonAdapter.  # noqa: E501
        :rtype: list[QueueData]
        """
        return self._queue_data

    @queue_data.setter
    def queue_data(self, queue_data):
        """Sets the queue_data of this JsonAdapter.


        :param queue_data: The queue_data of this JsonAdapter.  # noqa: E501
        :type: list[QueueData]
        """

        self._queue_data = queue_data

    @property
    def resource_data(self):
        """Gets the resource_data of this JsonAdapter.  # noqa: E501


        :return: The resource_data of this JsonAdapter.  # noqa: E501
        :rtype: list[AnyOfJsonAdapterResourceDataItems]
        """
        return self._resource_data

    @resource_data.setter
    def resource_data(self, resource_data):
        """Sets the resource_data of this JsonAdapter.


        :param resource_data: The resource_data of this JsonAdapter.  # noqa: E501
        :type: list[AnyOfJsonAdapterResourceDataItems]
        """

        self._resource_data = resource_data

    @property
    def material_data(self):
        """Gets the material_data of this JsonAdapter.  # noqa: E501


        :return: The material_data of this JsonAdapter.  # noqa: E501
        :rtype: list[MaterialData]
        """
        return self._material_data

    @material_data.setter
    def material_data(self, material_data):
        """Sets the material_data of this JsonAdapter.


        :param material_data: The material_data of this JsonAdapter.  # noqa: E501
        :type: list[MaterialData]
        """

        self._material_data = material_data

    @property
    def sink_data(self):
        """Gets the sink_data of this JsonAdapter.  # noqa: E501


        :return: The sink_data of this JsonAdapter.  # noqa: E501
        :rtype: list[SinkData]
        """
        return self._sink_data

    @sink_data.setter
    def sink_data(self, sink_data):
        """Sets the sink_data of this JsonAdapter.


        :param sink_data: The sink_data of this JsonAdapter.  # noqa: E501
        :type: list[SinkData]
        """

        self._sink_data = sink_data

    @property
    def source_data(self):
        """Gets the source_data of this JsonAdapter.  # noqa: E501


        :return: The source_data of this JsonAdapter.  # noqa: E501
        :rtype: list[SourceData]
        """
        return self._source_data

    @source_data.setter
    def source_data(self, source_data):
        """Sets the source_data of this JsonAdapter.


        :param source_data: The source_data of this JsonAdapter.  # noqa: E501
        :type: list[SourceData]
        """

        self._source_data = source_data

    @property
    def scenario_data(self):
        """Gets the scenario_data of this JsonAdapter.  # noqa: E501


        :return: The scenario_data of this JsonAdapter.  # noqa: E501
        :rtype: ScenarioData
        """
        return self._scenario_data

    @scenario_data.setter
    def scenario_data(self, scenario_data):
        """Sets the scenario_data of this JsonAdapter.


        :param scenario_data: The scenario_data of this JsonAdapter.  # noqa: E501
        :type: ScenarioData
        """

        self._scenario_data = scenario_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JsonAdapter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonAdapter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
