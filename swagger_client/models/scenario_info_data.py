# coding: utf-8

"""
    ProdSim API

     The ProdSim-API allows you to create and run production simulations and optimizations with the ProdSim library.    # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: sebastianbehrendt97@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScenarioInfoData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'machine_cost': 'float',
        'transport_resource_cost': 'float',
        'process_module_cost': 'float',
        'breakdown_cost': 'float',
        'time_range': 'int',
        'maximum_breakdown_time': 'int'
    }

    attribute_map = {
        'machine_cost': 'machine_cost',
        'transport_resource_cost': 'transport_resource_cost',
        'process_module_cost': 'process_module_cost',
        'breakdown_cost': 'breakdown_cost',
        'time_range': 'time_range',
        'maximum_breakdown_time': 'maximum_breakdown_time'
    }

    def __init__(self, machine_cost=None, transport_resource_cost=None, process_module_cost=None, breakdown_cost=None, time_range=None, maximum_breakdown_time=None):  # noqa: E501
        """ScenarioInfoData - a model defined in Swagger"""  # noqa: E501
        self._machine_cost = None
        self._transport_resource_cost = None
        self._process_module_cost = None
        self._breakdown_cost = None
        self._time_range = None
        self._maximum_breakdown_time = None
        self.discriminator = None
        self.machine_cost = machine_cost
        self.transport_resource_cost = transport_resource_cost
        self.process_module_cost = process_module_cost
        if breakdown_cost is not None:
            self.breakdown_cost = breakdown_cost
        if time_range is not None:
            self.time_range = time_range
        if maximum_breakdown_time is not None:
            self.maximum_breakdown_time = maximum_breakdown_time

    @property
    def machine_cost(self):
        """Gets the machine_cost of this ScenarioInfoData.  # noqa: E501


        :return: The machine_cost of this ScenarioInfoData.  # noqa: E501
        :rtype: float
        """
        return self._machine_cost

    @machine_cost.setter
    def machine_cost(self, machine_cost):
        """Sets the machine_cost of this ScenarioInfoData.


        :param machine_cost: The machine_cost of this ScenarioInfoData.  # noqa: E501
        :type: float
        """
        if machine_cost is None:
            raise ValueError("Invalid value for `machine_cost`, must not be `None`")  # noqa: E501

        self._machine_cost = machine_cost

    @property
    def transport_resource_cost(self):
        """Gets the transport_resource_cost of this ScenarioInfoData.  # noqa: E501


        :return: The transport_resource_cost of this ScenarioInfoData.  # noqa: E501
        :rtype: float
        """
        return self._transport_resource_cost

    @transport_resource_cost.setter
    def transport_resource_cost(self, transport_resource_cost):
        """Sets the transport_resource_cost of this ScenarioInfoData.


        :param transport_resource_cost: The transport_resource_cost of this ScenarioInfoData.  # noqa: E501
        :type: float
        """
        if transport_resource_cost is None:
            raise ValueError("Invalid value for `transport_resource_cost`, must not be `None`")  # noqa: E501

        self._transport_resource_cost = transport_resource_cost

    @property
    def process_module_cost(self):
        """Gets the process_module_cost of this ScenarioInfoData.  # noqa: E501


        :return: The process_module_cost of this ScenarioInfoData.  # noqa: E501
        :rtype: float
        """
        return self._process_module_cost

    @process_module_cost.setter
    def process_module_cost(self, process_module_cost):
        """Sets the process_module_cost of this ScenarioInfoData.


        :param process_module_cost: The process_module_cost of this ScenarioInfoData.  # noqa: E501
        :type: float
        """
        if process_module_cost is None:
            raise ValueError("Invalid value for `process_module_cost`, must not be `None`")  # noqa: E501

        self._process_module_cost = process_module_cost

    @property
    def breakdown_cost(self):
        """Gets the breakdown_cost of this ScenarioInfoData.  # noqa: E501


        :return: The breakdown_cost of this ScenarioInfoData.  # noqa: E501
        :rtype: float
        """
        return self._breakdown_cost

    @breakdown_cost.setter
    def breakdown_cost(self, breakdown_cost):
        """Sets the breakdown_cost of this ScenarioInfoData.


        :param breakdown_cost: The breakdown_cost of this ScenarioInfoData.  # noqa: E501
        :type: float
        """

        self._breakdown_cost = breakdown_cost

    @property
    def time_range(self):
        """Gets the time_range of this ScenarioInfoData.  # noqa: E501


        :return: The time_range of this ScenarioInfoData.  # noqa: E501
        :rtype: int
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this ScenarioInfoData.


        :param time_range: The time_range of this ScenarioInfoData.  # noqa: E501
        :type: int
        """

        self._time_range = time_range

    @property
    def maximum_breakdown_time(self):
        """Gets the maximum_breakdown_time of this ScenarioInfoData.  # noqa: E501


        :return: The maximum_breakdown_time of this ScenarioInfoData.  # noqa: E501
        :rtype: int
        """
        return self._maximum_breakdown_time

    @maximum_breakdown_time.setter
    def maximum_breakdown_time(self, maximum_breakdown_time):
        """Sets the maximum_breakdown_time of this ScenarioInfoData.


        :param maximum_breakdown_time: The maximum_breakdown_time of this ScenarioInfoData.  # noqa: E501
        :type: int
        """

        self._maximum_breakdown_time = maximum_breakdown_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScenarioInfoData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioInfoData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
