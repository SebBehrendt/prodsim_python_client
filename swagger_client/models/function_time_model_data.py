# coding: utf-8

"""
    ProdSim API

     The ProdSim-API allows you to create and run production simulations and optimizations with the ProdSim library.    # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: sebastianbehrendt97@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FunctionTimeModelData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'type': 'str',
        'distribution_function': 'str',
        'parameters': 'list[float]',
        'batch_size': 'int'
    }

    attribute_map = {
        'id': 'ID',
        'description': 'description',
        'type': 'type',
        'distribution_function': 'distribution_function',
        'parameters': 'parameters',
        'batch_size': 'batch_size'
    }

    def __init__(self, id=None, description=None, type=None, distribution_function=None, parameters=None, batch_size=100):  # noqa: E501
        """FunctionTimeModelData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._type = None
        self._distribution_function = None
        self._parameters = None
        self._batch_size = None
        self.discriminator = None
        self.id = id
        self.description = description
        self.type = type
        self.distribution_function = distribution_function
        self.parameters = parameters
        if batch_size is not None:
            self.batch_size = batch_size

    @property
    def id(self):
        """Gets the id of this FunctionTimeModelData.  # noqa: E501


        :return: The id of this FunctionTimeModelData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FunctionTimeModelData.


        :param id: The id of this FunctionTimeModelData.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this FunctionTimeModelData.  # noqa: E501


        :return: The description of this FunctionTimeModelData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FunctionTimeModelData.


        :param description: The description of this FunctionTimeModelData.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def type(self):
        """Gets the type of this FunctionTimeModelData.  # noqa: E501


        :return: The type of this FunctionTimeModelData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FunctionTimeModelData.


        :param type: The type of this FunctionTimeModelData.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["FunctionTimeModel"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def distribution_function(self):
        """Gets the distribution_function of this FunctionTimeModelData.  # noqa: E501


        :return: The distribution_function of this FunctionTimeModelData.  # noqa: E501
        :rtype: str
        """
        return self._distribution_function

    @distribution_function.setter
    def distribution_function(self, distribution_function):
        """Sets the distribution_function of this FunctionTimeModelData.


        :param distribution_function: The distribution_function of this FunctionTimeModelData.  # noqa: E501
        :type: str
        """
        if distribution_function is None:
            raise ValueError("Invalid value for `distribution_function`, must not be `None`")  # noqa: E501
        allowed_values = ["constant", "exponential", "normal"]  # noqa: E501
        if distribution_function not in allowed_values:
            raise ValueError(
                "Invalid value for `distribution_function` ({0}), must be one of {1}"  # noqa: E501
                .format(distribution_function, allowed_values)
            )

        self._distribution_function = distribution_function

    @property
    def parameters(self):
        """Gets the parameters of this FunctionTimeModelData.  # noqa: E501


        :return: The parameters of this FunctionTimeModelData.  # noqa: E501
        :rtype: list[float]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this FunctionTimeModelData.


        :param parameters: The parameters of this FunctionTimeModelData.  # noqa: E501
        :type: list[float]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def batch_size(self):
        """Gets the batch_size of this FunctionTimeModelData.  # noqa: E501


        :return: The batch_size of this FunctionTimeModelData.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this FunctionTimeModelData.


        :param batch_size: The batch_size of this FunctionTimeModelData.  # noqa: E501
        :type: int
        """

        self._batch_size = batch_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FunctionTimeModelData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FunctionTimeModelData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
