# coding: utf-8

"""
    ProdSim API

     The ProdSim-API allows you to create and run production simulations and optimizations with the ProdSim library.    # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: sebastianbehrendt97@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EvolutionaryAlgorithmHyperparameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seed': 'int',
        'number_of_generations': 'int',
        'population_size': 'int',
        'mutation_rate': 'float',
        'crossover_rate': 'float',
        'number_of_processes': 'int'
    }

    attribute_map = {
        'seed': 'seed',
        'number_of_generations': 'number_of_generations',
        'population_size': 'population_size',
        'mutation_rate': 'mutation_rate',
        'crossover_rate': 'crossover_rate',
        'number_of_processes': 'number_of_processes'
    }

    def __init__(self, seed=None, number_of_generations=None, population_size=None, mutation_rate=None, crossover_rate=None, number_of_processes=None):  # noqa: E501
        """EvolutionaryAlgorithmHyperparameters - a model defined in Swagger"""  # noqa: E501
        self._seed = None
        self._number_of_generations = None
        self._population_size = None
        self._mutation_rate = None
        self._crossover_rate = None
        self._number_of_processes = None
        self.discriminator = None
        self.seed = seed
        self.number_of_generations = number_of_generations
        self.population_size = population_size
        self.mutation_rate = mutation_rate
        self.crossover_rate = crossover_rate
        self.number_of_processes = number_of_processes

    @property
    def seed(self):
        """Gets the seed of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501


        :return: The seed of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this EvolutionaryAlgorithmHyperparameters.


        :param seed: The seed of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :type: int
        """
        if seed is None:
            raise ValueError("Invalid value for `seed`, must not be `None`")  # noqa: E501

        self._seed = seed

    @property
    def number_of_generations(self):
        """Gets the number_of_generations of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501


        :return: The number_of_generations of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :rtype: int
        """
        return self._number_of_generations

    @number_of_generations.setter
    def number_of_generations(self, number_of_generations):
        """Sets the number_of_generations of this EvolutionaryAlgorithmHyperparameters.


        :param number_of_generations: The number_of_generations of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :type: int
        """
        if number_of_generations is None:
            raise ValueError("Invalid value for `number_of_generations`, must not be `None`")  # noqa: E501

        self._number_of_generations = number_of_generations

    @property
    def population_size(self):
        """Gets the population_size of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501


        :return: The population_size of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :rtype: int
        """
        return self._population_size

    @population_size.setter
    def population_size(self, population_size):
        """Sets the population_size of this EvolutionaryAlgorithmHyperparameters.


        :param population_size: The population_size of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :type: int
        """
        if population_size is None:
            raise ValueError("Invalid value for `population_size`, must not be `None`")  # noqa: E501

        self._population_size = population_size

    @property
    def mutation_rate(self):
        """Gets the mutation_rate of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501


        :return: The mutation_rate of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :rtype: float
        """
        return self._mutation_rate

    @mutation_rate.setter
    def mutation_rate(self, mutation_rate):
        """Sets the mutation_rate of this EvolutionaryAlgorithmHyperparameters.


        :param mutation_rate: The mutation_rate of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :type: float
        """
        if mutation_rate is None:
            raise ValueError("Invalid value for `mutation_rate`, must not be `None`")  # noqa: E501

        self._mutation_rate = mutation_rate

    @property
    def crossover_rate(self):
        """Gets the crossover_rate of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501


        :return: The crossover_rate of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :rtype: float
        """
        return self._crossover_rate

    @crossover_rate.setter
    def crossover_rate(self, crossover_rate):
        """Sets the crossover_rate of this EvolutionaryAlgorithmHyperparameters.


        :param crossover_rate: The crossover_rate of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :type: float
        """
        if crossover_rate is None:
            raise ValueError("Invalid value for `crossover_rate`, must not be `None`")  # noqa: E501

        self._crossover_rate = crossover_rate

    @property
    def number_of_processes(self):
        """Gets the number_of_processes of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501


        :return: The number_of_processes of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :rtype: int
        """
        return self._number_of_processes

    @number_of_processes.setter
    def number_of_processes(self, number_of_processes):
        """Sets the number_of_processes of this EvolutionaryAlgorithmHyperparameters.


        :param number_of_processes: The number_of_processes of this EvolutionaryAlgorithmHyperparameters.  # noqa: E501
        :type: int
        """
        if number_of_processes is None:
            raise ValueError("Invalid value for `number_of_processes`, must not be `None`")  # noqa: E501

        self._number_of_processes = number_of_processes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EvolutionaryAlgorithmHyperparameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EvolutionaryAlgorithmHyperparameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
