# coding: utf-8

"""
    ProdSim API

     The ProdSim-API allows you to create and run production simulations and optimizations with the ProdSim library.    # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: sebastianbehrendt97@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScenarioData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'constraints': 'ScenarioConstrainsData',
        'options': 'ScenarioOptionsData',
        'info': 'ScenarioInfoData',
        'optimize': 'list[KPIEnum]',
        'weights': 'dict(str, float)'
    }

    attribute_map = {
        'constraints': 'constraints',
        'options': 'options',
        'info': 'info',
        'optimize': 'optimize',
        'weights': 'weights'
    }

    def __init__(self, constraints=None, options=None, info=None, optimize=None, weights=None):  # noqa: E501
        """ScenarioData - a model defined in Swagger"""  # noqa: E501
        self._constraints = None
        self._options = None
        self._info = None
        self._optimize = None
        self._weights = None
        self.discriminator = None
        self.constraints = constraints
        self.options = options
        self.info = info
        self.optimize = optimize
        if weights is not None:
            self.weights = weights

    @property
    def constraints(self):
        """Gets the constraints of this ScenarioData.  # noqa: E501


        :return: The constraints of this ScenarioData.  # noqa: E501
        :rtype: ScenarioConstrainsData
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this ScenarioData.


        :param constraints: The constraints of this ScenarioData.  # noqa: E501
        :type: ScenarioConstrainsData
        """
        if constraints is None:
            raise ValueError("Invalid value for `constraints`, must not be `None`")  # noqa: E501

        self._constraints = constraints

    @property
    def options(self):
        """Gets the options of this ScenarioData.  # noqa: E501


        :return: The options of this ScenarioData.  # noqa: E501
        :rtype: ScenarioOptionsData
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ScenarioData.


        :param options: The options of this ScenarioData.  # noqa: E501
        :type: ScenarioOptionsData
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def info(self):
        """Gets the info of this ScenarioData.  # noqa: E501


        :return: The info of this ScenarioData.  # noqa: E501
        :rtype: ScenarioInfoData
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ScenarioData.


        :param info: The info of this ScenarioData.  # noqa: E501
        :type: ScenarioInfoData
        """
        if info is None:
            raise ValueError("Invalid value for `info`, must not be `None`")  # noqa: E501

        self._info = info

    @property
    def optimize(self):
        """Gets the optimize of this ScenarioData.  # noqa: E501


        :return: The optimize of this ScenarioData.  # noqa: E501
        :rtype: list[KPIEnum]
        """
        return self._optimize

    @optimize.setter
    def optimize(self, optimize):
        """Sets the optimize of this ScenarioData.


        :param optimize: The optimize of this ScenarioData.  # noqa: E501
        :type: list[KPIEnum]
        """
        if optimize is None:
            raise ValueError("Invalid value for `optimize`, must not be `None`")  # noqa: E501

        self._optimize = optimize

    @property
    def weights(self):
        """Gets the weights of this ScenarioData.  # noqa: E501


        :return: The weights of this ScenarioData.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._weights

    @weights.setter
    def weights(self, weights):
        """Sets the weights of this ScenarioData.


        :param weights: The weights of this ScenarioData.  # noqa: E501
        :type: dict(str, float)
        """

        self._weights = weights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScenarioData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
