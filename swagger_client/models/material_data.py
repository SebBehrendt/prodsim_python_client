# coding: utf-8

"""
    ProdSim API

     The ProdSim-API allows you to create and run production simulations and optimizations with the ProdSim library.    # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: sebastianbehrendt97@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaterialData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'material_type': 'str',
        'processes': 'AnyOfMaterialDataProcesses',
        'transport_process': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'description': 'description',
        'material_type': 'material_type',
        'processes': 'processes',
        'transport_process': 'transport_process'
    }

    def __init__(self, id=None, description=None, material_type=None, processes=None, transport_process=None):  # noqa: E501
        """MaterialData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._material_type = None
        self._processes = None
        self._transport_process = None
        self.discriminator = None
        self.id = id
        self.description = description
        self.material_type = material_type
        self.processes = processes
        self.transport_process = transport_process

    @property
    def id(self):
        """Gets the id of this MaterialData.  # noqa: E501


        :return: The id of this MaterialData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MaterialData.


        :param id: The id of this MaterialData.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this MaterialData.  # noqa: E501


        :return: The description of this MaterialData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MaterialData.


        :param description: The description of this MaterialData.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def material_type(self):
        """Gets the material_type of this MaterialData.  # noqa: E501


        :return: The material_type of this MaterialData.  # noqa: E501
        :rtype: str
        """
        return self._material_type

    @material_type.setter
    def material_type(self, material_type):
        """Sets the material_type of this MaterialData.


        :param material_type: The material_type of this MaterialData.  # noqa: E501
        :type: str
        """
        if material_type is None:
            raise ValueError("Invalid value for `material_type`, must not be `None`")  # noqa: E501

        self._material_type = material_type

    @property
    def processes(self):
        """Gets the processes of this MaterialData.  # noqa: E501


        :return: The processes of this MaterialData.  # noqa: E501
        :rtype: AnyOfMaterialDataProcesses
        """
        return self._processes

    @processes.setter
    def processes(self, processes):
        """Sets the processes of this MaterialData.


        :param processes: The processes of this MaterialData.  # noqa: E501
        :type: AnyOfMaterialDataProcesses
        """
        if processes is None:
            raise ValueError("Invalid value for `processes`, must not be `None`")  # noqa: E501

        self._processes = processes

    @property
    def transport_process(self):
        """Gets the transport_process of this MaterialData.  # noqa: E501


        :return: The transport_process of this MaterialData.  # noqa: E501
        :rtype: str
        """
        return self._transport_process

    @transport_process.setter
    def transport_process(self, transport_process):
        """Sets the transport_process of this MaterialData.


        :param transport_process: The transport_process of this MaterialData.  # noqa: E501
        :type: str
        """
        if transport_process is None:
            raise ValueError("Invalid value for `transport_process`, must not be `None`")  # noqa: E501

        self._transport_process = transport_process

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaterialData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterialData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
